{
  "yes": "yes",
  "no": "no",
  "eg": "eg.",
  "next": "Next",
  "done": "Done",
  "loading": "Loading...",
  "nomore": "No more elements",
  "registered": "registered",
  "created": "created",
  "started": "started",
  "stopped": "stopped",
  "tally_ok": "tally done",
  "results_ok": "results done",
  "results_pub": "results published",
  "doing_tally": "doing the tally",
  "tally_error": "tally error",

  "app": {
    "name": "Sequent Tech"
  },
  "avAdmin": {
    "childrenElections": {
      "main":"Main election"
    }
  },
  "avCommon": {
    "cancel": "Cancel",
    "poweredBy": "Powered by <strong><a href=\"__url__\" target=\"_blank\">__name__</a></strong>",
    "shareLink": "¡Tweet this election!",
    "votingSystem": "Voting System",
    "votings": {"plurality-at-large": "Plurality at large", "borda-nauru": "Nauru's Borda Count or Borda Dowdall (1/n)", "borda": "Borda Count (traditional)", "pairwise-beta": "Pairwise (beta-distribution)", "desborda3": "DesBorda3", "desborda2": "DesBorda2", "desborda": "DesBorda", "cumulative": "Cumulative"}
  },
  "avElection": {
    "thisisATest": "<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span> <strong>Warning!</strong> This is a TEST election",
    "ballotLocatorTitle": "Locate your ballot",
    "downloadElectionData": "Download election configuration",
    "twitterShare": "Share on Twitter",
    "facebookShare": "Share on Facebook",
    "electionLink": "Link to election portal",
    "rotateQuestions": "Rotate questions",
    "ballotLocatorSubtitle": "Election: __title__",
    "inputLocatorPlaceholder": "Introduce here your ballot tracker",
    "ballotLocatorPTitle": "Ballot tracker",
    "searchLocatorButton": "Find your ballot",
    "locatorDescription": "When you cast your ballot, the ballot tracker is shown to you and allows you to track it without revealing the intention of the voter. Here you can introduce this ballot tracker and find out if a particular encrypted ballot was in fact cast successfully.",
    "locatorFoundText": "¡Ballot found! Indeed, the ballot with the ballot tracker <strong>__locator__</strong> was cast correctly. The text of the encrypted ballot is:",
    "locatorSearchingStatus": "Locating ballot tracker..",
    "locatorFoundStatus": "Ballot tracker found!",
    "locatorNotFoundStatus": "Ballot tracker not found: <strong>__locator__</strong>",
    "locatorInfoText": "Ballot tracker example: 78a319dbd699c5d6ff08ca08990b395e593bcb8282a7660417a50d0ee470503f",

    "resultsLoadingText": "Loading results",
    "errorLoadingText": "Error loading results. Maybe they have not been published, you don't have permissions or maybe the election does not exist.",
    "defaultShareText": "Vote in __title__ with @__handle__ __url__",

    "resultsHeader": "__title__: Results",
    "resultsTableNPositionHeader": "Number of votes by position:",
    "resultsTableCandidateHeader": "Candidature",
    "resultsTableVotesHeader": "Votes",
    "resultsTableVotesPercentageHeader": "",
    "resultsTablePositionHeader": "Position",
    "resultsLastUpdated": "Last updated: __date__",
    "resultsSummary": "Scrutiny summary",
    "totalNumberOfVotes": "Total number of votes:",
    "validVotes": "Votes to options:",
    "blankVotes": "Blank votes:",
    "nullVotes": "Null votes:",
    "stateNotPublished": "Sorry: the results cannot be shown because they haven't been published yet.",

    "errorLoadingQuestionTest": "Unknown question layout",

    "public": {
      "homeText": "Home",
      "resultsTitle": "Results",
      "chooseElectionResults": "Select the election results to view:",
      "loadingText": "Loading election",
      "voteLink": "Vote",
      "censusQueryLink": "Census query",
      "loadingDataText": "Cargando datos..",
      "errorNotFoundText": "Error loading the information.",
      "errorLoadingText": "Error loading the election. This election might not exist, or maybe it has not been published yet.",
      "faqsLink": "FAQs",
      "authoritiesLink": "Authorities",
      "overviewLink": "Overview",
      "technicalOverviewLink": "Technical overview",
      "demoVotingBoothLink": "Demo voting booth",
      "voteNowLink": "Vote now",
      "answers": "__count__ candidates",
      "answers_plural": "__count__ candidates",
      "answersRandomized": "__count__ candidates (in random order)",
      "answersRandomized_plural": "__count__ candidates (in random order)",
      "questionsTitle": "Questions",
      "questionInfoText": "Voters will select between <strong>__min__</strong> and <strong>__max__</strong> candidates. <strong>__numWinners__</strong> winners.",
      "votingSystemText": "Voting system: <strong>__method__</strong>.",
      "status-registered": "Status: <strong>election registered</strong>",
      "status-created": "Status: <strong>election created</strong>",
      "status-started": "Status: <strong>election started</strong>",
      "status-suspended": "Status: <strong>election suspended</strong>",
      "status-resumed": "Status: <strong>election resumed</strong>",
      "status-stopped": "Status: <strong>election stopped</strong>",
      "status-doing_tally": "Status: <strong>doing tally</strong>",
      "status-tally_ok": "Status: <strong>tally done</strong>",
      "status-results_ok": "Status: <strong>results calculated</strong>",
      "status-results_pub": "Status: <strong>results published</strong>"
    },

    "authorities": {
      "loading": "Loading authorities..",
      "loading": "Error loading authorities.",
      "title": "Election authorities",
      "intro": "The election authorities play a key role. The security system strength used in this election lies in a shared security system similar to election scrutineers in a traditional election, where they election encryption key is generated in a distributed manner by multiple independent election authorities, that ensure the secrecy of the ballot and in fact they are in charge of doing the tally. These are the election authorities:"
    },

    "resultsDirective": {
      "ballotLocatorLink": "Ballot tracker",
      "verifiableResultsLink": "Verifiable tally"
    },
    "verifyResults": {
      "title": "Verifiable election tally",
      "subtitle": "Election: __title__",
      "stateNotPublished": "Sorry. The election tally cannot be verified because the election results have not been published yet.",
      "stateLoading": "Loading election: wait please..",
      "verifyText": "<p>In this page we will describe the process through which it is possible to verify that the result of an election is valid. Each voter can verify that his/her cast ballot is included in the tally, and can also verify mathematically the result of the tally.</p><p>\n\n<strong>To perform that verification it is required to have a technical background. If you do not have it, we recommend to execute this verification process with the help of somebody with a technical background.</strong></p><p>\n\nThe first thing you need to verify the tally is to download the &quot;election-verifier&quot; software. This is the program that performs the needed verifications over an __name__ election. You can download election-verifier from here:<p>\n\n<p>\n\n<p><a href=\"{{verifier.link}}\" target=\"_blank\">election-verifier</a><span class=\"special\"> (sha256sum: {{verifier.hash}})</span></p>\n\n<p>or you can <a href=\"https://github.com/sequentech/election-verifier\">install it manually from the source code, following the instructions in github</a>.</p><p>\n\nelection-verifier has been tested to work in Linux, and requires:</p>\n<ul>\n<li>A 64 bits Linux Operative System.</li>\n<li>Python 3.3 o later</li>\n<li>Java v7 o later installed.</li>\n<li>uuencode (&quot;sudo apt-get install sharutils&quot; en Debian/Ubuntu).</li>\n</ul>\n\n<p>The file that contains the data of the election, that we usually  call \"tally.tar\" is the following one:</p>\n\n<p><a class=\"tally-link\" href=\"{{publicURL}}{{electionId}}/{{electionId}}.tar\" target=\"_blank\">Election tally ({{electionId}}.tar)</a></p>\n\n<p>To verify the tally, you can simply execute:</p>\n\n<p>\n<code>\nsh election-verifier {{electionId}}.tar\n</code>\n</p>\n\n<p>The output of the that execution will be something similar to the following:</p>\n\n<code>\nsh election-verifier {{electionId}}.tar<br/><br/>\n\n* extracted to /tmp/tmp9c2r5e3jtally<br/>\n* extracted raw tally to /tmp/tmp9c2r5e3jtally/tally-raw-0<br/>\n* running ['./tally-pipes', '-t', '/tmp/tmp9c2r5e3jtally/0.tar.gz', '-c', '/tmp/tmp9c2r5e3jtally/config.json', '-s', '-o', 'json']<br/>\n* results hash verification OK<br/>\n* processing /tmp/tmp9c2r5e3jtally/tally-raw-0<br/>\n# Results ##########################################<br/>\ntotal number of votes (including blank/invalid votes): 37<br/>\nQuestion #1: Secretario General<br/>\n<br/>\nnumber of options available: 2<br/>\n<br/>\nRaw winning options (position):<br/>\n...<br/>\n<br/>\n<br/>\n####################################################<br/>\n<br/>\n* verifying proofs of knowledge of the plaintexts...<br/>\n* ..finished. Verified 37 votes (0 invalid)<br/>\n* proofs of knowledge of plaintexts OK (0 invalid)<br/>\n* running './pverify.sh .rnd /tmp/tmp9c2r5e3jtally/tally-raw-0'<br/>\n* initializing random source..Successfully initialized random source!<br/>\n* begin proof verification on '/tmp/tmp9c2r5e3jtally/tally-raw-0'<br/>\n* processing /tmp/tmp9c2r5e3jtally/tally-raw-0/0-089b56b3-3ffc-4f91-ace5-eef571162d8c..<br/>\n*<br/>\n* ============ Read and derive common values. ====================<br/>\n* 150101 18:46:10 Read joint public key... * done.<br/>\n* 150101 18:46:11 Read individual El Gamal public keys... * done.<br/>\n* 150101 18:46:11 Verify relation between public keys... * done.<br/>\n* 150101 18:46:11 Read input ciphertexts... * done.<br/>\n* 150101 18:46:11 Derive independent generators... * done.<br/>\n*<br/>\n* ============ Verify shuffle of Party 1. ========================<br/>\n* 150101 18:46:11 Read output of Party 1... * done.<br/>\n* 150101 18:46:11 Verify proof of shuffle... * done.<br/>\n*<br/>\n* ============ Verify shuffle of Party 2. ========================<br/>\n* 150101 18:46:12 Read output of Party 2... * done.<br/>\n* 150101 18:46:12 Verify proof of shuffle... * done.<br/>\n*<br/>\n* ============ Verify decryption of Party 1. =====================<br/>\n* 150101 18:46:12 Read decryption factors... * done.<br/>\n* 150101 18:46:12 Verify decryption proof... * done.<br/>\n*<br/>\n* ============ Verify decryption of Party 2. =====================<br/>\n* 150101 18:46:13 Read decryption factors... * done.<br/>\n* 150101 18:46:13 Verify decryption proof... * done.<br/>\n*<br/>\n* ============ Verify finalization. ==============================<br/>\n* 150101 18:46:13 Decrypt using verified decryption factors... * done.<br/>\n* 150101 18:46:13 Read and verify plaintexts... * done.<br/>\n*<br/>\n* Verification completed SUCCESSFULLY after 0h 0m 4s.<br/>\n* verification is OK<br/>\n* processing question_dir 0-089b56b3-3ffc-4f91-ace5-eef571162d8c<br/>\n* running '/tmp/tmp.J9d7GWUECw/election-verifier/vmnc.sh .rnd -plain -outi json proofs/PlaintextElements.bt plaintexts_json2'<br/>\n* initializing random source..Successfully initialized random source!<br/>\n* calling mixnet interface with vmnc .rnd  -plain -outi json proofs/PlaintextElements.bt plaintexts_json2..<br/>\n* vmnc call succeeded<br/>\n* plaintexts_json verification OK<br/>\n* running '/tmp/tmp.J9d7GWUECw/election-verifier/vmnc.sh .rnd -ciphs -ini json ciphertexts_json ciphertexts_raw'<br/>\n* calling mixnet interface with vmnc .rnd  -ciphs -ini json ciphertexts_json ciphertexts_raw..<br/>\n* vmnc call succeeded<br/>\n* ciphertexts_json verification OK<br/>\n<br/>\n</code>\n\n<p></p>\n<p>The most important thing is that the command finishes saying &quot;OK&quot;. If there is any failure, the command will not finish saying OK but FAILED. We will now list the steps involved in the verification. For technical reasons the command doesn't follow the exact same order as listed in here, but we still list them this way for clarity:</p>\n<ol>\n<li>Extract the file in a directory whose path is printed in the screen</li><li>\nShow in the screen briefly the most important data of the tally: number of votes and the list of winning options (NOT in order).</li><li>\nRead the result_json file that corresponds with the results of the tally shown in the previous step and hash it.</li><li>\nRead the publick keys with which the ballots where encrypted (file pubkeys_json)</li><li>\nRead the ballots from the file ciphertexts_json and check the validity of the Zero Knownledge Proofs (ZKP) mathematical proofs that prove that the person that encrypted the ballot knew the plain text content of the ballot.</li><li>\nThe next step is to verify some elements from each question. Each question is encrypted separately, and thus the tally and some verifications are made also separately:<ol><li>\nVerify that starting with the ballot of the file &quot;ciphertexts_json&quot; it can be obtained the encrypted ballot in raw format. A hash of both files is made and it is checked that the result is the same. If this verification fails, the script prints on the screen &quot;ciphertexts_json verification FAILED&quot;.</li><li>\nRead the ZKP proofs that mathematically prove that starting with the encrypted ballots of this question, the result is the decrypted ballots in raw format. If these proofs fail, the script prints &quot;verification FAILED&quot;.</li><li>\nVerify that the decrypted ballots in raw format can be converted in the result ballots in text format of the file &quot;plaintexts_json&quot;. A hash of both files is made and it is checked that both match. If this check fails, the script prints &quot;plaintexts_json verification FAILED&quot;.</li>\n</ol><li>\nRead the file that contains the decrypted votes, and calculate the tally of the election from that data.</li><li>\nCheck that the hash of that file matches the hash of  result_json obtained in step 3. If the comparison fails, the script prints &quot;tally verification FAILED&quot;.</li>\n</p>\n<p>As can be seen, <strong>it is mathematically and univocally proved</strong> that starting with the encrypted ballots, the election tally is correct. Some questions might be raised: where are all those ballots coming from? is my ballot included?</p><p>\n\nFirst, we have to say that the voting system implies the need of some trust in the organizations running the election, especially it is assumed that no ballot stuffing has not happened. This is a limitation (reflected in the <a href=\"https://sequentech.io/static/generic_tech_overview_20_08_15.pdf\">tecnical overview</a>, section 6.3.3) that stems from the fact the ballots are not digitally signed, and they are not because very few people have a digital certificate that they can easily use in an election of this kind.In other european countries like for example Estonia, <a href=\"http://www.vvk.ee/voting-methods-in-estonia/engindex/statistics\">e-ID seems to have widespread use and thus 24,3% of the electorate voted through Internet in 2011 elections</a>.</p><p>\n\nNevertheless, it can be mathematically proved that your individual ballot, the one that you cast as voter, is included in the list of encrypted ballots, in that list we have verified to generate the correct election result. To verify your vote, you need to have saved the ballot tracker, which is just a hash of the ballot. </p><p>\n\nThis ballot tracker appears in the screen when you finish the voting process of the voting booth. If you do not saved your ballot tracker, remember that you have to save it if you want to be able to perform this verification. </p><p>\n\nTo check that your ballot is included in the tally, you simply need to execute the same command as before, adding as a parameter your ballot tracker:</p>\n\n<code>\nsh election-verifier {{electionId}}.tar [ballot-tracker]\n</code>\n"
    },
    "legal": {
        "title": "Legal",
        "contact": "contact"
    }
  }
}
