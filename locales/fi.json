{
  "yes": "kyllä",
  "no": "ei",
  "eg": "esim.",
  "next": "Seuraava",
  "done": "valmis",
  "loading": "Lataa...",
  "nomore": "Ei enempää sisältöä",
  "registered": "rekisteröity",
  "created": "luotu",
  "started": "aloitettu",
  "stopped": "pysäytetty",
  "tally_ok": "äänet laskettu",
  "results_ok": "tulokset valmiit",
  "results_pub": "tulokset julkaistu",
  "doing_tally": "ääntenlasku käynnissä",
  "tally_error": "virhe ääntenlaskussa",

  "app": {
    "name": "Sequent Tech"
  },
  "avCommon": {
    "cancel": "Keskeytä",
    "poweredBy": "Powered by <strong><a href=\"__url__\" target=\"_blank\">__name__</a></strong>",
    "shareLink": "¡Tweet this election!",
    "votingSystem": "Voting System",
    "votings": {"plurality-at-large": "Plurality at large", "borda-nauru": "Nauru's Borda Count or Borda Dowdall (1/n)", "borda": "Borda Count (traditional)", "pairwise-beta": "Pairwise (beta-distribution)", "desborda3": "DesBorda3", "desborda2": "DesBorda2", "desborda": "DesBorda"}
  },
  "avElection": {
    "thisisATest": "<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span> <strong>HUOM!</strong> Tämä on testiäänestys, äänet eivät tallennu oikeasti.",
    "ballotLocatorTitle": "Tarkista onko äänesi tallentunut",
    "ballotLocatorSubtitle": "Äänestys: __title__",
    "inputLocatorPlaceholder": "Syötä äänesi tarkistusnumero",
    "ballotLocatorPTitle": "Äänen seuranta",
    "searchLocatorButton": "Etsi ääneni",
    "locatorDescription": "Kun tallennat äänesi, sinulle ilmoitetaan äänen tarkistusnumero. Tarkistusnumeron avulla voi tarkastaa, että ääni on todella tallentunut sähköiseen vaaliuurnaan ilman, että äänen sisältö paljastuu. Tähän voit syöttää tarkistusnumeron.",
    "locatorFoundText": "Ääni löytyi! Tarkistusnumerolla <strong>__locator__</strong> annettu ääni on todella tallentunut oikein sähköisen vaaliuurnaan. Äänestyslipun tieto on:",
    "locatorSearchingStatus": "<span class=\"text-primary\">Pengotaan sähköistä vaaliuurnaa...</span>",
    "locatorFoundStatus": "<span class=\"text-success\">Ääni löytyi!</span>",
    "locatorNotFoundStatus": "<span class=\"text-danger\">Ääntä ei löytynyt: <strong>__locator__</strong></span>",
    "locatorInfoText": "Tarkistusnumero näyttää tämäntapaiselta: 78a319dbd699c5d6ff08ca08990b395e593bcb8282a7660417a50d0ee470503f",

    "resultsLoadingText": "Haetaan tuloksia",
    "errorLoadingText": "Tuloksien haku epäonnistui. Äänestustuloksia ei kenties ole vielä julkaistu. Tai sinulla ei ole oikeuksia tarkastella niitä.",
    "defaultShareText": "Äänestä äänestyksessä __title__ tällä tunnuksella @__handle__ __url__",

    "resultsHeader": "__title__: Tulokset",
    "resultsTableNPositionHeader": "Äänten määrä järjestyksessä:",
    "resultsTableCandidateHeader": "Ehdokkaat",
    "resultsTableVotesHeader": "Äänet",
    "resultsTableVotesPercentageHeader": "Osuus",
    "resultsTablePositionHeader": "Sija",
    "resultsLastUpdated": "Viimeksi päivitetty: __date__",
    "resultsSummary": "Yhteenveto",
    "totalNumberOfVotes": "Annettuja ääniä yhteensä:",
    "validVotes": "Ääni optioihin:",
    "blankVotes": "Tyhjiä ääniä:",
    "nullVotes": "Hylättyjä ääniä:",
    "stateNotPublished": "Pahoittelut, tuloksia ei voi näyttää, sillä niitä ei ole vielä julkaistu.",

    "errorLoadingQuestionTest": "Kysymyksen asettelu epäselvä",

    "public": {
      "homeText": "Etusivu",
      "resultsTitle": "Tulokset",
      "loadingText": "Haetaan äänestyksen tuloksia",
      "voteLink": "Äänestä",
      "censusQueryLink": "Äänioikeuden tarkastaminen",
      "loadingDataText": "Haetaan päiviä",
      "errorNotFoundText": "Virhe tietojen hakemusessa.",
      "errorLoadingText": "Virhe äänestyksen tietojen hakemisessa. Tätä äänestystä ei löydy, sitä ei ole tai sitä ei ole vielä julkaistu.",
      "faqsLink": "UKK",
      "authoritiesLink": "Vaalivirkailijat",
      "overviewLink": "Yhteenveto",
      "technicalOverviewLink": "Tekninen yhteenveto",
      "demoVotingBoothLink": "Luonnos äänestyssivusta",
      "voteNowLink": "Äänestä nyt",
      "answers": "__count__ ehdokas",
      "answers_plural": "__count__ ehdokasta",
      "answersRandomized": "__count__ ehdokas (satunnaisessa järjestyksessä)",
      "answersRandomized_plural": "__count__ ehdokasta (satunnaisessa järjestyksessä)",
      "questionsTitle": "Kysymykset",
      "questionInfoText": "Äänestäjät valitsevat <strong>__min__</strong> ja <strong>__max__</strong> ehdokkaan välillä. <strong>__numWinners__</strong> eniten ääniä saanutta voittaa.",
      "votingSystemText": "Äänestysmenetelmä: <strong>__method__</strong>.",
      "status-registered": "Status: <strong>äänestys rekisteröity</strong>",
      "status-created": "Status: <strong>äänestys luotu</strong>",
      "status-started": "Status: <strong>äänestys aloitettu</strong>",
      "status-stopped": "Status: <strong>äänestys lopetettu</strong>",
      "status-doing_tally": "Status: <strong>ääntenlaskenta käynnissä</strong>",
      "status-tally_ok": "Status: <strong>ääntenlaskenta valmis</strong>",
      "status-results_ok": "Status: <strong>tulokset valmiit</strong>",
      "status-results_pub": "Status: <strong>tulokset julkaistu</strong>"
    },

    "authorities": {
      "loading": "Haetaan virkailijoiden tietoja..",
      "loading": "Haku epäonnistui.",
      "title": "Vaalivirkailijat",
      "intro": "Vaalivirkailijoilla on tärkeä rooli. Äänestysjärjestelmän turvallisuus perustuu jaettuun vastuuseen. Äänten salausavain ei ole kenenkään yhden henkilön tiedossa, vaan jaettu eri virkailijoille osissa. Vaalivirkailijat vastaavat äänten salassapysymisestä ja äänten laskennen oikeellisuudesta. Tässä äänestyksessä vaalivirkailijoita ovat:"
    },

    "resultsDirective": {
      "ballotLocatorLink": "Äänten tarkastaminen",
      "verifiableResultsLink": "Tarkistettu äänestystulos"
    },
    "verifyResults": {
      "title": "Tarkistettu äänestystulos",
      "subtitle": "Äänestys: __title__",
      "stateNotPublished": "Pahoittelut. Äänestystulosta ei voi vahvistaa, koska tuloksia ei ole vielä julkaistu.",
      "stateLoading": "Haetaan äänestystuloksia: odota hetki..",
      "verifyText": "<p>Tällä sivulla kuvataan vaiheet, joiden kautta varmistetaan äänestystulokset oikeellisuus. Jokainen äänestäjä voi tarkistaa, että oma ääni on mukana ääntenlaskennassa ja ääntenlaskennan kokonaistulokset matemaattisen oikeellisuuden. Nämä vaiheittaiset ohjeet on julkaistu englanniksi, pyydä tarvittaessa lisäohjeita. </p><p>\n\n<strong>To perform that verification it is required to have a technical background. If you do not have it, we recommend to execute this verification process with the help of somebody with a technical background.</strong></p><p>\n\nThe first thing you need to verify the tally is to download the &quot;election-verifier&quot; software. This is the program that performs the needed verifications over an __name__ election. You can download election-verifier from here:<p>\n\n<p>\n\n<p><a href=\"{{verifier.link}}\" target=\"_blank\">election-verifier</a><span class=\"special\"> (sha256sum: {{verifier.hash}})</span></p>\n\n<p>or you can <a href=\"https://github.com/sequentech/election-verifier\">install it manually from the source code, following the instructions in github</a>.</p><p>\n\nelection-verifier has been tested to work in Linux, and requires:</p>\n<ul>\n<li>A 64 bits Linux Operative System.</li>\n<li>Python 3.3 o later</li>\n<li>Java v7 o later installed.</li>\n<li>uuencode (&quot;sudo apt-get install sharutils&quot; en Debian/Ubuntu).</li>\n</ul>\n\n<p>The file that contains the data of the election, that we usually  call \"tally.tar\" is the following one:</p>\n\n<p><a class=\"tally-link\" href=\"{{publicURL}}{{electionId}}/{{electionId}}.tar\" target=\"_blank\">Election tally ({{electionId}}.tar)</a></p>\n\n<p>To verify the tally, you can simply execute:</p>\n\n<p>\n<code>\nsh election-verifier {{electionId}}.tar\n</code>\n</p>\n\n<p>The output of the that execution will be something similar to the following:</p>\n\n<code>\nsh election-verifier {{electionId}}.tar<br/><br/>\n\n* extracted to /tmp/tmp9c2r5e3jtally<br/>\n* extracted raw tally to /tmp/tmp9c2r5e3jtally/tally-raw-0<br/>\n* running ['./tally-pipes', '-t', '/tmp/tmp9c2r5e3jtally/0.tar.gz', '-c', '/tmp/tmp9c2r5e3jtally/config.json', '-s', '-o', 'json']<br/>\n* results hash verification OK<br/>\n* processing /tmp/tmp9c2r5e3jtally/tally-raw-0<br/>\n# Results ##########################################<br/>\ntotal number of votes (including blank/invalid votes): 37<br/>\nQuestion #1: Secretario General<br/>\n<br/>\nnumber of options available: 2<br/>\n<br/>\nRaw winning options (position):<br/>\n...<br/>\n<br/>\n<br/>\n####################################################<br/>\n<br/>\n* verifying proofs of knowledge of the plaintexts...<br/>\n* ..finished. Verified 37 votes (0 invalid)<br/>\n* proofs of knowledge of plaintexts OK (0 invalid)<br/>\n* running './pverify.sh .rnd /tmp/tmp9c2r5e3jtally/tally-raw-0'<br/>\n* initializing random source..Successfully initialized random source!<br/>\n* begin proof verification on '/tmp/tmp9c2r5e3jtally/tally-raw-0'<br/>\n* processing /tmp/tmp9c2r5e3jtally/tally-raw-0/0-089b56b3-3ffc-4f91-ace5-eef571162d8c..<br/>\n*<br/>\n* ============ Read and derive common values. ====================<br/>\n* 150101 18:46:10 Read joint public key... * done.<br/>\n* 150101 18:46:11 Read individual El Gamal public keys... * done.<br/>\n* 150101 18:46:11 Verify relation between public keys... * done.<br/>\n* 150101 18:46:11 Read input ciphertexts... * done.<br/>\n* 150101 18:46:11 Derive independent generators... * done.<br/>\n*<br/>\n* ============ Verify shuffle of Party 1. ========================<br/>\n* 150101 18:46:11 Read output of Party 1... * done.<br/>\n* 150101 18:46:11 Verify proof of shuffle... * done.<br/>\n*<br/>\n* ============ Verify shuffle of Party 2. ========================<br/>\n* 150101 18:46:12 Read output of Party 2... * done.<br/>\n* 150101 18:46:12 Verify proof of shuffle... * done.<br/>\n*<br/>\n* ============ Verify decryption of Party 1. =====================<br/>\n* 150101 18:46:12 Read decryption factors... * done.<br/>\n* 150101 18:46:12 Verify decryption proof... * done.<br/>\n*<br/>\n* ============ Verify decryption of Party 2. =====================<br/>\n* 150101 18:46:13 Read decryption factors... * done.<br/>\n* 150101 18:46:13 Verify decryption proof... * done.<br/>\n*<br/>\n* ============ Verify finalization. ==============================<br/>\n* 150101 18:46:13 Decrypt using verified decryption factors... * done.<br/>\n* 150101 18:46:13 Read and verify plaintexts... * done.<br/>\n*<br/>\n* Verification completed SUCCESSFULLY after 0h 0m 4s.<br/>\n* verification is OK<br/>\n* processing question_dir 0-089b56b3-3ffc-4f91-ace5-eef571162d8c<br/>\n* running '/tmp/tmp.J9d7GWUECw/election-verifier/vmnc.sh .rnd -plain -outi json proofs/PlaintextElements.bt plaintexts_json2'<br/>\n* initializing random source..Successfully initialized random source!<br/>\n* calling mixnet interface with vmnc .rnd  -plain -outi json proofs/PlaintextElements.bt plaintexts_json2..<br/>\n* vmnc call succeeded<br/>\n* plaintexts_json verification OK<br/>\n* running '/tmp/tmp.J9d7GWUECw/election-verifier/vmnc.sh .rnd -ciphs -ini json ciphertexts_json ciphertexts_raw'<br/>\n* calling mixnet interface with vmnc .rnd  -ciphs -ini json ciphertexts_json ciphertexts_raw..<br/>\n* vmnc call succeeded<br/>\n* ciphertexts_json verification OK<br/>\n<br/>\n</code>\n\n<p></p>\n<p>The most important thing is that the command finishes saying &quot;OK&quot;. If there is any failure, the command will not finish saying OK but FAILED. We will now list the steps involved in the verification. For technical reasons the command doesn't follow the exact same order as listed in here, but we still list them this way for clarity:</p>\n<ol>\n<li>Extract the file in a directory whose path is printed in the screen</li><li>\nShow in the screen briefly the most important data of the tally: number of votes and the list of winning options (NOT in order).</li><li>\nRead the result_json file that corresponds with the results of the tally shown in the previous step and hash it.</li><li>\nRead the publick keys with which the ballots where encrypted (file pubkeys_json)</li><li>\nRead the ballots from the file ciphertexts_json and check the validity of the Zero Knownledge Proofs (ZKP) mathematical proofs that prove that the person that encrypted the ballot knew the plain text content of the ballot.</li><li>\nThe next step is to verify some elements from each question. Each question is encrypted separately, and thus the tally and some verifications are made also separately:<ol><li>\nVerify that starting with the ballot of the file &quot;ciphertexts_json&quot; it can be obtained the encrypted ballot in raw format. A hash of both files is made and it is checked that the result is the same. If this verification fails, the script prints on the screen &quot;ciphertexts_json verification FAILED&quot;.</li><li>\nRead the ZKP proofs that mathematically prove that starting with the encrypted ballots of this question, the result is the decrypted ballots in raw format. If these proofs fail, the script prints &quot;verification FAILED&quot;.</li><li>\nVerify that the decrypted ballots in raw format can be converted in the result ballots in text format of the file &quot;plaintexts_json&quot;. A hash of both files is made and it is checked that both match. If this check fails, the script prints &quot;plaintexts_json verification FAILED&quot;.</li>\n</ol><li>\nRead the file that contains the decrypted votes, and calculate the tally of the election from that data.</li><li>\nCheck that the hash of that file matches the hash of  result_json obtained in step 3. If the comparison fails, the script prints &quot;tally verification FAILED&quot;.</li>\n</p>\n<p>As can be seen, <strong>it is mathematically and univocally proved</strong> that starting with the encrypted ballots, the election tally is correct. Some questions might be raised: where are all those ballots coming from? is my ballot included?</p><p>\n\nFirst, we have to say that the voting system implies the need of some trust in the organizations running the election, especially it is assumed that no ballot stuffing has not happened. This is a limitation (reflected in the <a href=\"https://sequentech.io/static/generic_tech_overview_20_08_15.pdf\">tecnical overview</a>, section 6.3.3) that stems from the fact the ballots are not digitally signed, and they are not because very few people have a digital certificate that they can easily use in an election of this kind.In other european countries like for example Estonia, <a href=\"http://www.vvk.ee/voting-methods-in-estonia/engindex/statistics\">e-ID seems to have widespread use and thus 24,3% of the electorate voted through Internet in 2011 elections</a>.</p><p>\n\nNevertheless, it can be mathematically proved that your individual ballot, the one that you cast as voter, is included in the list of encrypted ballots, in that list we have verified to generate the correct election result. To verify your vote, you need to have saved the ballot tracker, which is just a hash of the ballot. </p><p>\n\nThis ballot tracker appears in the screen when you finish the voting process of the voting booth. If you do not saved your ballot tracker, remember that you have to save it if you want to be able to perform this verification. </p><p>\n\nTo check that your ballot is included in the tally, you simply need to execute the same command as before, adding as a parameter your ballot tracker:</p>\n\n<code>\nsh election-verifier {{electionId}}.tar [ballot-tracker]\n</code>\n"
    },
    "legal": {
        "title": "Lakiasiat",
        "contact": "Ota yhteyttä"
    }
  }
}
